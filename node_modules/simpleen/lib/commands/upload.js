"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadCommand = void 0;
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const BaseCommand_1 = (0, tslib_1.__importDefault)(require("../BaseCommand"));
const errors_1 = require("@oclif/errors");
const inquirer_1 = (0, tslib_1.__importDefault)(require("inquirer"));
const init_1 = require("./init");
const config_1 = (0, tslib_1.__importDefault)(require("../helpers/config"));
const upload_1 = (0, tslib_1.__importStar)(require("../helpers/upload"));
const translation_1 = require("../helpers/translation");
const listr_1 = (0, tslib_1.__importDefault)(require("listr"));
/**
 * Upload already translated or adapted translation values
 * After upload translated values, they will be used in future translations
 */
class UploadCommand extends BaseCommand_1.default {
    async run() {
        const { flags } = this.parse(UploadCommand);
        const config = config_1.default.loadConfig(flags.config);
        const target_languages_choices = init_1.target_languages.filter((l) => config.target_languages.includes(l.value));
        // Let the user select the target language to upload
        const response = await inquirer_1.default.prompt([
            {
                name: "language",
                message: "Select the target language you want to upload",
                type: "list",
                choices: [{ name: "All", value: "all" }, ...target_languages_choices],
            },
        ]);
        const uploadTasks = [];
        // Read all source files
        const files = await (0, translation_1.getFilePaths)(config.input_path);
        for (const file of files) {
            const sourceName = (0, upload_1.getFileName)(file);
            const dataformat = (0, upload_1.getDataFormatfromFile)(file);
            // Check if file exists in Simpleen Backend
            const apiFile = await upload_1.default.saveFile(config, {
                name: sourceName,
                dataformat,
                filepath: file,
                interpolation: config.interpolation,
                sourceLanguage: config.source_language,
                targetLanguages: config.target_languages,
            });
            // Read source file
            const sourceData = (0, translation_1.loadTranslation)(file);
            // For each target language
            if (response.language === "all") {
                // Read all existing target files from disk
                const tasks = config.target_languages.map((lang) => {
                    return {
                        title: `Upload ${file} ${config.source_language} => ${lang}`,
                        task: async () => {
                            try {
                                const targetPath = (0, translation_1.replaceVariablesInPath)(file, config.output_path, lang);
                                // Check if loaded source and target has same extension
                                if (dataformat !== (0, upload_1.getDataFormatfromFile)(targetPath)) {
                                    throw new errors_1.CLIError("Source- and targetfile need to have same extension");
                                }
                                const targetData = (0, translation_1.loadTranslation)(targetPath);
                                // Upload/Sync with API
                                const result = await (0, upload_1.uploadData)(config, {
                                    dataformat: dataformat,
                                    sourceData: sourceData,
                                    targetData: targetData,
                                    file: apiFile.id,
                                    sourceLanguage: config.source_language,
                                    targetLanguage: lang,
                                    interpolation: config.interpolation,
                                });
                                return result;
                            }
                            catch (e) {
                                if (e instanceof Error || typeof e === "string") {
                                    throw new errors_1.CLIError(e);
                                }
                                throw new errors_1.CLIError("Unknown error: " + e);
                            }
                        },
                    };
                }, {});
                uploadTasks.push(...tasks);
            }
            else {
                const lang = response.language;
                uploadTasks.push({
                    title: `Upload ${file} ${config.source_language} => ${lang}`,
                    task: async () => {
                        try {
                            const targetPath = (0, translation_1.replaceVariablesInPath)(file, config.output_path, lang);
                            const targetData = (0, translation_1.loadTranslation)(targetPath);
                            const result = await (0, upload_1.uploadData)(config, {
                                dataformat,
                                sourceData: sourceData,
                                targetData: targetData,
                                file: apiFile.id,
                                sourceLanguage: config.source_language,
                                targetLanguage: lang,
                                interpolation: config.interpolation,
                            });
                            return result;
                        }
                        catch (e) {
                            if (e instanceof Error || typeof e === "string") {
                                throw new errors_1.CLIError(e);
                            }
                            throw new errors_1.CLIError("Unknown error: " + e);
                        }
                    },
                });
            }
        }
        // Run tasks, continue with next language if error occurs
        const tasks = new listr_1.default(uploadTasks, { exitOnError: false });
        tasks.run().catch(() => {
            // handled in Listr, continues with translation to next language
            // console.error(err.message);
        });
    }
}
exports.UploadCommand = UploadCommand;
UploadCommand.description = "Upload already translated/adapted translation values";
UploadCommand.flags = {
    config: command_1.flags.string({
        default: "./simpleen.config.json",
        description: "Defines where the config is located",
    }),
};
