"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TranslateCommand = void 0;
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const chalk_1 = (0, tslib_1.__importDefault)(require("chalk"));
const BaseCommand_1 = (0, tslib_1.__importDefault)(require("../BaseCommand"));
const errors_1 = require("@oclif/errors");
const listr_1 = (0, tslib_1.__importDefault)(require("listr"));
const config_1 = (0, tslib_1.__importDefault)(require("../helpers/config"));
const translation_1 = (0, tslib_1.__importDefault)(require("../helpers/translation"));
const usage_1 = require("../helpers/usage");
const upload_1 = require("../helpers/upload");
/**
 * Translates project to the configured target languages
 * considers the lock file to exclude allready translated/verfied translations
 */
class TranslateCommand extends BaseCommand_1.default {
    async run() {
        const { flags } = this.parse(TranslateCommand);
        const config = config_1.default.loadConfig(flags.config);
        const translationTasks = [];
        // Read all source files to translate
        const files = await translation_1.default.getFilePaths(config.input_path);
        // Read each file and translate it
        files.forEach((file) => {
            try {
                const translationData = translation_1.default.loadTranslation(file);
                config.target_languages.forEach((language) => {
                    // Target file
                    const targetFile = translation_1.default.replaceVariablesInPath(file, config.output_path, language);
                    const dataformat = (0, upload_1.getDataFormatfromFile)(file);
                    // Check if target and source format is same
                    if (dataformat !== (0, upload_1.getDataFormatfromFile)(targetFile)) {
                        throw new errors_1.CLIError("Source- and targetfile need to have same extension");
                    }
                    // Add to tasks
                    translationTasks.push({
                        title: `Translate ${file} ${config.source_language} => ${language}`,
                        task: async () => {
                            try {
                                const result = await translation_1.default.translateIntoLanguage(config, dataformat, translationData, language);
                                translation_1.default.saveTranslation(targetFile, dataformat, result);
                            }
                            catch (e) {
                                if (e instanceof Error || typeof e === "string") {
                                    throw new errors_1.CLIError(e);
                                }
                                throw new errors_1.CLIError("Unknown error: " + e);
                            }
                        },
                    });
                });
            }
            catch (e) {
                if (e instanceof Error || typeof e === "string") {
                    throw new errors_1.CLIError(e);
                }
                throw new errors_1.CLIError("Unknown error: " + e);
            }
        });
        // Check usage after all translations
        translationTasks.push({
            title: "Check usage",
            task: async () => {
                const quota = await (0, usage_1.getUsage)(config);
                if (quota.usage.segment >= quota.plan.maxSegment) {
                    console.warn(chalk_1.default.yellow("Limit reached. All text segments that exceed your usage limit are omitted from the result. \nYou can upgrade now to keep localizing on https://simpleen.io/app/#/upgrade"));
                }
            },
        });
        // Run tasks, continue with next language if error occurs
        const tasks = new listr_1.default(translationTasks, { exitOnError: false });
        tasks.run().catch(() => {
            // handled in Listr, continues with translation to next language
            // console.error(err.message);
        });
    }
}
exports.TranslateCommand = TranslateCommand;
TranslateCommand.description = "Translate project";
TranslateCommand.flags = {
    config: command_1.flags.string({
        default: "./simpleen.config.json",
        description: "Defines where you config file is located",
    }),
    lockFile: command_1.flags.string({
        default: "./simpleen.lock.json",
        description: "Defines where your lock file is located",
    }),
};
