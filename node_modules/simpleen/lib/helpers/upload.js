"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadData = exports.saveFile = exports.getDataFormatfromFile = exports.getFileName = void 0;
const tslib_1 = require("tslib");
const path_1 = (0, tslib_1.__importDefault)(require("path"));
const errors_1 = require("@oclif/errors");
const api_1 = require("./api");
/**
 * Returns a filename without extension (i.e. /locales/en.json -> en)
 * @param path without variables
 */
function getFileName(filePath) {
    return path_1.default.basename(filePath, path_1.default.extname(filePath));
}
exports.getFileName = getFileName;
/**
 * Get DataFormat from File
 * @param filePath to the target files
 */
function getDataFormatfromFile(filePath) {
    const extension = path_1.default.extname(filePath).toUpperCase();
    switch (extension) {
        case ".JSON": {
            return "JSON";
        }
        case ".PO": {
            return "PO";
        }
        case ".YML":
        case ".YAML": {
            return "YAML";
        }
        case ".PROPERTIES": {
            return "Properties";
        }
        case ".JS":
        case ".TS":
        case ".JSX":
        case ".TSX": {
            throw new errors_1.CLIError("Dataformat not supported: Use an extractor for your i18n library, see https://simpleen.io/documentation/translate-cli");
        }
        default: {
            throw new errors_1.CLIError("Dataformat not supported for extension " + extension);
        }
    }
}
exports.getDataFormatfromFile = getDataFormatfromFile;
/**
 * Saves new file or returns
 */
async function saveFile(config, file) {
    // Check if file already exist
    const fileList = await (0, api_1.getData)(config, "files", {
        name: file.name,
        filepath: file.filepath,
        _sort: "id:desc",
    });
    // Return existing file from API
    if (fileList[0]) {
        return fileList[0];
    }
    // Create new file
    const createdFile = await (0, api_1.createData)(config, "files", Object.assign(Object.assign({}, file), { formality: "default" }));
    return createdFile;
}
exports.saveFile = saveFile;
/**
 * Uploads file data
 */
function uploadData(config, syncData) {
    return (0, api_1.createData)(config, "segments/upload", Object.assign(Object.assign({}, syncData), { sourceData: syncData.sourceData, targetData: syncData.targetData }));
}
exports.uploadData = uploadData;
exports.default = {
    getFileName,
    saveFile,
    uploadData,
};
